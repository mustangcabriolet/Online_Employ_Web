<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.job.mapper.RecruitmentMapper">
  <resultMap id="BaseResultMap" type="com.job.entity.Recruitment">
    <id column="no" jdbcType="INTEGER" property="no" />
    <result column="position" jdbcType="VARCHAR" property="position" />
    <result column="subject" jdbcType="VARCHAR" property="subject" />
    <result column="industry" jdbcType="VARCHAR" property="industry" />
    <result column="education" jdbcType="VARCHAR" property="education" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="province" jdbcType="VARCHAR" property="province" />
    <result column="pay" jdbcType="DECIMAL" property="pay" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="num" jdbcType="INTEGER" property="num" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="benefits" jdbcType="VARCHAR" property="benefits" />
    <result column="requirements" jdbcType="VARCHAR" property="requirements" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    no, position, subject, industry, education, name, province, pay, type, num, description, 
    benefits, requirements
  </sql>
  <select id="selectByExample" parameterType="com.job.entity.RecruitmentExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from recruitment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limit != null">
      <if test="offset != null">
        limit ${offset}, ${limit}
      </if>
      <if test="offset == null">
        limit ${limit}
      </if>
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from recruitment
    where no = #{no,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from recruitment
    where no = #{no,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.job.entity.RecruitmentExample">
    delete from recruitment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.job.entity.Recruitment">
    insert into recruitment (no, position, subject, 
      industry, education, name, 
      province, pay, type, 
      num, description, benefits, 
      requirements)
    values (#{no,jdbcType=INTEGER}, #{position,jdbcType=VARCHAR}, #{subject,jdbcType=VARCHAR}, 
      #{industry,jdbcType=VARCHAR}, #{education,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, 
      #{province,jdbcType=VARCHAR}, #{pay,jdbcType=DECIMAL}, #{type,jdbcType=VARCHAR}, 
      #{num,jdbcType=INTEGER}, #{description,jdbcType=VARCHAR}, #{benefits,jdbcType=VARCHAR}, 
      #{requirements,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.job.entity.Recruitment">
    insert into recruitment
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="no != null">
        no,
      </if>
      <if test="position != null">
        position,
      </if>
      <if test="subject != null">
        subject,
      </if>
      <if test="industry != null">
        industry,
      </if>
      <if test="education != null">
        education,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="province != null">
        province,
      </if>
      <if test="pay != null">
        pay,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="num != null">
        num,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="benefits != null">
        benefits,
      </if>
      <if test="requirements != null">
        requirements,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="no != null">
        #{no,jdbcType=INTEGER},
      </if>
      <if test="position != null">
        #{position,jdbcType=VARCHAR},
      </if>
      <if test="subject != null">
        #{subject,jdbcType=VARCHAR},
      </if>
      <if test="industry != null">
        #{industry,jdbcType=VARCHAR},
      </if>
      <if test="education != null">
        #{education,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="province != null">
        #{province,jdbcType=VARCHAR},
      </if>
      <if test="pay != null">
        #{pay,jdbcType=DECIMAL},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="num != null">
        #{num,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="benefits != null">
        #{benefits,jdbcType=VARCHAR},
      </if>
      <if test="requirements != null">
        #{requirements,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.job.entity.RecruitmentExample" resultType="java.lang.Long">
    select count(*) from recruitment
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update recruitment
    <set>
      <if test="record.no != null">
        no = #{record.no,jdbcType=INTEGER},
      </if>
      <if test="record.position != null">
        position = #{record.position,jdbcType=VARCHAR},
      </if>
      <if test="record.subject != null">
        subject = #{record.subject,jdbcType=VARCHAR},
      </if>
      <if test="record.industry != null">
        industry = #{record.industry,jdbcType=VARCHAR},
      </if>
      <if test="record.education != null">
        education = #{record.education,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.province != null">
        province = #{record.province,jdbcType=VARCHAR},
      </if>
      <if test="record.pay != null">
        pay = #{record.pay,jdbcType=DECIMAL},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.num != null">
        num = #{record.num,jdbcType=INTEGER},
      </if>
      <if test="record.description != null">
        description = #{record.description,jdbcType=VARCHAR},
      </if>
      <if test="record.benefits != null">
        benefits = #{record.benefits,jdbcType=VARCHAR},
      </if>
      <if test="record.requirements != null">
        requirements = #{record.requirements,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update recruitment
    set no = #{record.no,jdbcType=INTEGER},
      position = #{record.position,jdbcType=VARCHAR},
      subject = #{record.subject,jdbcType=VARCHAR},
      industry = #{record.industry,jdbcType=VARCHAR},
      education = #{record.education,jdbcType=VARCHAR},
      name = #{record.name,jdbcType=VARCHAR},
      province = #{record.province,jdbcType=VARCHAR},
      pay = #{record.pay,jdbcType=DECIMAL},
      type = #{record.type,jdbcType=VARCHAR},
      num = #{record.num,jdbcType=INTEGER},
      description = #{record.description,jdbcType=VARCHAR},
      benefits = #{record.benefits,jdbcType=VARCHAR},
      requirements = #{record.requirements,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.job.entity.Recruitment">
    update recruitment
    <set>
      <if test="position != null">
        position = #{position,jdbcType=VARCHAR},
      </if>
      <if test="subject != null">
        subject = #{subject,jdbcType=VARCHAR},
      </if>
      <if test="industry != null">
        industry = #{industry,jdbcType=VARCHAR},
      </if>
      <if test="education != null">
        education = #{education,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="province != null">
        province = #{province,jdbcType=VARCHAR},
      </if>
      <if test="pay != null">
        pay = #{pay,jdbcType=DECIMAL},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="num != null">
        num = #{num,jdbcType=INTEGER},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="benefits != null">
        benefits = #{benefits,jdbcType=VARCHAR},
      </if>
      <if test="requirements != null">
        requirements = #{requirements,jdbcType=VARCHAR},
      </if>
    </set>
    where no = #{no,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.job.entity.Recruitment">
    update recruitment
    set position = #{position,jdbcType=VARCHAR},
      subject = #{subject,jdbcType=VARCHAR},
      industry = #{industry,jdbcType=VARCHAR},
      education = #{education,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      province = #{province,jdbcType=VARCHAR},
      pay = #{pay,jdbcType=DECIMAL},
      type = #{type,jdbcType=VARCHAR},
      num = #{num,jdbcType=INTEGER},
      description = #{description,jdbcType=VARCHAR},
      benefits = #{benefits,jdbcType=VARCHAR},
      requirements = #{requirements,jdbcType=VARCHAR}
    where no = #{no,jdbcType=INTEGER}
  </update>
</mapper>